<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>天猫双十一美妆销售数据分析</title>
      <link href="/2025/04/04/%E5%A4%A9%E7%8C%AB%E5%8F%8C%E5%8D%81%E4%B8%80%E7%BE%8E%E5%A6%86%E9%94%80%E5%94%AE%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/2025/04/04/%E5%A4%A9%E7%8C%AB%E5%8F%8C%E5%8D%81%E4%B8%80%E7%BE%8E%E5%A6%86%E9%94%80%E5%94%AE%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>数据为天猫双十一女性美妆的数据集，围绕产品及其销量和评论撰写。数据具有7个特征，可以从多个维度解析文本。数据集中对店名的引用被处理为产品的品牌名以保护店家隐私，所以做了匿名处理<br>数据包括27599行和7个特征变量。每一行对应一个产品的销售情况，包括以下变量:<br>update_time 统计时间<br>id 产品编号<br>title 产品名称<br>price 交易价格<br>sale_count 销量<br>comment_count 评论数量<br>店名 店铺名称<br>可参考的探索方向：<br>购买化妆品的客户的关注度(评论数)是多少？各产品销量分布情况？ 哪些产品的卖得最好，哪些牌子最受欢迎，哪些化妆品是大家最需要的？ 不同商家之间的差异，及促销打折力度？ 模拟定价系统及推荐系统？</p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>pandas数据处理、matplotlib、数据可视化、数据探索分析</p><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">data = pd.read_csv(&#x27;双十一淘宝美妆数据.csv&#x27;)</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><p><img src="/img/图片18.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看各字段信息</span><br><span class="line">data.info()</span><br></pre></td></tr></table></figure><br><img src="/img/图片19.png" alt=""><br>分店铺统计<br>data[‘店名’].value_counts()<br><img src="/img/图片20.png" alt=""></p><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><h3 id="重复数据处理"><a href="#重复数据处理" class="headerlink" title="重复数据处理"></a>重复数据处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对重复数据做删除处理</span><br><span class="line">print(data.shape)</span><br><span class="line">data = data.drop_duplicates(inplace=False)</span><br><span class="line">print(data.shape)</span><br></pre></td></tr></table></figure><p>(27598, 7)<br>(27512, 7)</p><p>data.drop_duplicates(inplace=False)：<br>● drop_duplicates() 是 pandas 中用来删除重复行的方法。<br>● inplace=False 表示 不在原地修改数据，而是返回一个 新的 DataFrame。如果设置为 True，则会直接在原数据上修改，不返回新的 DataFrame。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#此处虽然删除了重复值，但索引未变，因此应用以下方法进行重置索引</span><br><span class="line">print(data.index)</span><br><span class="line">data = data.reset_index(drop=True)</span><br><span class="line">print(&#x27;新索引：&#x27;,data.index)</span><br></pre></td></tr></table></figure><br>Index([    0,     1,     2,     3,     4,     5,     6,     7,     8,     9,<br>       …<br>       27588, 27589, 27590, 27591, 27592, 27593, 27594, 27595, 27596, 27597],<br>      dtype=’int64’, length=27512)<br>新索引： RangeIndex(start=0, stop=27512, step=1)<br>  上面删除了重复行，索引跟着也删了，比如 [0, 1, 3, 4, 6, 7, …]（出现跳跃）。<br>reset_index() 的作用是 重置索引，让索引从 0 开始重新排列，避免索引不连续的问题。  </p><h3 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看缺失值</span><br><span class="line">data.isnull().any()</span><br></pre></td></tr></table></figure><p>update_time      False<br>id               False<br>title            False<br>price            False<br>sale_count        True<br>comment_count     True<br>店名               False<br>dtype: bool<br>有两列数据存在缺失值：sale_count, comment_count<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看数据结构</span><br><span class="line">data.describe()</span><br></pre></td></tr></table></figure><br><img src="/img/图片21.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查看sale_count列的众数</span><br><span class="line">mode_01 = data.sale_count.mode()</span><br><span class="line">print(mode_01)</span><br><span class="line"></span><br><span class="line"># 查看comment_count列的众数</span><br><span class="line">mode_02 = data.comment_count.mode()</span><br><span class="line">print(mode_02)</span><br></pre></td></tr></table></figure><br>0    0.0<br>dtype: float64<br>0    0.0<br>dtype: float64</p><p>此处两列的众数均为0，且由标签数据含义可知销售量和评论数有可能存在为0的情况，因此使用0来填充缺失值<br>mode()方法返回数据列中出现频率最高的值（众数）。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 填充缺失值</span><br><span class="line">data = data.fillna(0)</span><br><span class="line"># 对空值行数求和，验证无剩余缺失值</span><br><span class="line">data.isnull().sum()</span><br></pre></td></tr></table></figure><br>update_time      0<br>id               0<br>title            0<br>price            0<br>sale_count       0<br>comment_count    0<br>店名               0<br>dtype: int64</p><h3 id="提取表格中有用信息并新增为列"><a href="#提取表格中有用信息并新增为列" class="headerlink" title="提取表格中有用信息并新增为列"></a>提取表格中有用信息并新增为列</h3><figure class="highlight plaintext"><figcaption><span>结巴分词库</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import jieba </span><br><span class="line"># jieba.load_userdict(&#x27;addwords.txt&#x27;)</span><br><span class="line">title_cut = []</span><br><span class="line">for i in data.title:</span><br><span class="line">    j = jieba.lcut(i)</span><br><span class="line">    title_cut.append(j)</span><br><span class="line">    </span><br><span class="line"># 对标题进行分词，新增item_name_cut列</span><br><span class="line">data[&#x27;item_name_cut&#x27;] = title_cut</span><br><span class="line">data[[&#x27;title&#x27;,&#x27;item_name_cut&#x27;]].head()</span><br></pre></td></tr></table></figure><p><img src="/img/图片22.png" alt=""><br>j = jieba.lcut(i)<br>使用 jieba.lcut(i) 对 i 进行分词，并返回一个列表（list）。<br>data[‘item_name_cut’] = title_cut<br>给 data 这个表新增一列 item_name_cut，存储所有标题的分词结果。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 给商品添加分类</span><br><span class="line">basic_config_data = &quot;&quot;&quot;护肤品    套装    套装                            </span><br><span class="line">护肤品    乳液类    乳液    美白乳    润肤乳    凝乳    柔肤液&#x27;    亮肤乳    菁华乳    修护乳</span><br><span class="line">护肤品    眼部护理    眼霜    眼部精华    眼膜                    </span><br><span class="line">护肤品    面膜类    面膜                                                    </span><br><span class="line">护肤品    清洁类    洗面    洁面    清洁    卸妆    洁颜    洗颜    去角质    磨砂                        </span><br><span class="line">护肤品    化妆水    化妆水    爽肤水    柔肤水    补水露    凝露    柔肤液    精粹水    亮肤水    润肤水    保湿水    菁华水    保湿喷雾    舒缓喷雾</span><br><span class="line">护肤品    面霜类    面霜    日霜    晚霜    柔肤霜    滋润霜    保湿霜    凝霜    日间霜    晚间霜    乳霜    修护霜    亮肤霜    底霜    菁华霜</span><br><span class="line">护肤品    精华类    精华液    精华水    精华露    精华素                                        </span><br><span class="line">护肤品    防晒类    防晒霜    防晒喷雾                                                </span><br><span class="line">化妆品    口红类    唇釉    口红    唇彩                                            </span><br><span class="line">化妆品    底妆类    散粉    蜜粉    粉底液    定妆粉     气垫    粉饼    BB    CC    遮瑕    粉霜    粉底膏    粉底霜        </span><br><span class="line">化妆品    眼部彩妆    眉粉    染眉膏    眼线    眼影    睫毛膏                                    </span><br><span class="line">化妆品    修容类    鼻影    修容粉    高光    腮红                                        </span><br><span class="line">其他    其他    其他&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line"># 将字符串basic_config_data 转为字典 category_config_map</span><br><span class="line">category_config_map = &#123;&#125;</span><br><span class="line">for config_line in basic_config_data.split(&#x27;\n&#x27;):</span><br><span class="line">    basic_cateogry_list = config_line.strip().strip(&#x27;\n&#x27;).strip(&#x27;    &#x27;).split(&#x27;    &#x27;)</span><br><span class="line">    main_category = basic_cateogry_list[0]</span><br><span class="line">    sub_category = basic_cateogry_list[1]</span><br><span class="line">    unit_category_list = basic_cateogry_list[2:-1]</span><br><span class="line">    for unit_category in unit_category_list:</span><br><span class="line">        if unit_category and unit_category.strip().strip(&#x27;    &#x27;):</span><br><span class="line">            category_config_map[unit_category] = (main_category,sub_category)</span><br><span class="line">            </span><br><span class="line">category_config_map</span><br></pre></td></tr></table></figure><br>{‘乳液’: (‘护肤品’, ‘乳液类’),<br> ‘美白乳’: (‘护肤品’, ‘乳液类’),<br> ‘润肤乳’: (‘护肤品’, ‘乳液类’),<br> ‘凝乳’: (‘护肤品’, ‘乳液类’),<br> “柔肤液’”: (‘护肤品’, ‘乳液类’),<br> ‘亮肤乳’: (‘护肤品’, ‘乳液类’),<br> ‘菁华乳’: (‘护肤品’, ‘乳液类’),<br> ‘眼霜’: (‘护肤品’, ‘眼部护理’),<br> ‘眼部精华’: (‘护肤品’, ‘眼部护理’),<br> ‘洗面’: (‘护肤品’, ‘清洁类’),<br> ‘洁面’: (‘护肤品’, ‘清洁类’),<br> ‘清洁’: (‘护肤品’, ‘清洁类’),<br> ‘卸妆’: (‘护肤品’, ‘清洁类’),<br> ‘洁颜’: (‘护肤品’, ‘清洁类’),<br> ‘洗颜’: (‘护肤品’, ‘清洁类’),<br> ‘去角质’: (‘护肤品’, ‘清洁类’),<br> ‘化妆水’: (‘护肤品’, ‘化妆水’),<br> ‘爽肤水’: (‘护肤品’, ‘化妆水’),<br> ‘柔肤水’: (‘护肤品’, ‘化妆水’),<br> ‘补水露’: (‘护肤品’, ‘化妆水’),<br> ‘凝露’: (‘护肤品’, ‘化妆水’),<br> ‘柔肤液’: (‘护肤品’, ‘化妆水’),<br> ‘精粹水’: (‘护肤品’, ‘化妆水’),<br> ‘亮肤水’: (‘护肤品’, ‘化妆水’),<br> ‘润肤水’: (‘护肤品’, ‘化妆水’),<br> ‘保湿水’: (‘护肤品’, ‘化妆水’),<br> ‘菁华水’: (‘护肤品’, ‘化妆水’),<br> ‘保湿喷雾’: (‘护肤品’, ‘化妆水’),<br> ‘面霜’: (‘护肤品’, ‘面霜类’),<br> ‘日霜’: (‘护肤品’, ‘面霜类’),<br> ‘晚霜’: (‘护肤品’, ‘面霜类’),<br> ‘柔肤霜’: (‘护肤品’, ‘面霜类’),<br> ‘滋润霜’: (‘护肤品’, ‘面霜类’),<br> ‘保湿霜’: (‘护肤品’, ‘面霜类’),<br> ‘凝霜’: (‘护肤品’, ‘面霜类’),<br> ‘日间霜’: (‘护肤品’, ‘面霜类’),<br> ‘晚间霜’: (‘护肤品’, ‘面霜类’),<br> ‘乳霜’: (‘护肤品’, ‘面霜类’),<br> ‘修护霜’: (‘护肤品’, ‘面霜类’),<br> ‘亮肤霜’: (‘护肤品’, ‘面霜类’),<br> ‘底霜’: (‘护肤品’, ‘面霜类’),<br> ‘精华液’: (‘护肤品’, ‘精华类’),<br> ‘精华水’: (‘护肤品’, ‘精华类’),<br> ‘精华露’: (‘护肤品’, ‘精华类’),<br> ‘防晒霜’: (‘护肤品’, ‘防晒类’),<br> ‘唇釉’: (‘化妆品’, ‘口红类’),<br> ‘口红’: (‘化妆品’, ‘口红类’),<br> ‘散粉’: (‘化妆品’, ‘底妆类’),<br> ‘蜜粉’: (‘化妆品’, ‘底妆类’),<br> ‘粉底液’: (‘化妆品’, ‘底妆类’),<br> ‘定妆粉’: (‘化妆品’, ‘底妆类’),<br> ‘ 气垫’: (‘化妆品’, ‘底妆类’),<br> ‘粉饼’: (‘化妆品’, ‘底妆类’),<br> ‘BB’: (‘化妆品’, ‘底妆类’),<br> ‘CC’: (‘化妆品’, ‘底妆类’),<br> ‘遮瑕’: (‘化妆品’, ‘底妆类’),<br> ‘粉霜’: (‘化妆品’, ‘底妆类’),<br> ‘粉底膏’: (‘化妆品’, ‘底妆类’),<br> ‘眉粉’: (‘化妆品’, ‘眼部彩妆’),<br> ‘染眉膏’: (‘化妆品’, ‘眼部彩妆’),<br> ‘眼线’: (‘化妆品’, ‘眼部彩妆’),<br> ‘眼影’: (‘化妆品’, ‘眼部彩妆’),<br> ‘鼻影’: (‘化妆品’, ‘修容类’),<br> ‘修容粉’: (‘化妆品’, ‘修容类’),<br> ‘高光’: (‘化妆品’, ‘修容类’)}<br>● 第 1 列（main_category）是大类，比如 护肤品、化妆品<br>● 第 2 列（sub_category）是子类，比如 乳液类、面霜类<br>● 后续列（unit_category_list）是具体商品类别，比如 乳液、美白乳、润肤乳<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">def func1(row):</span><br><span class="line">    sub_type = &#x27;&#x27;   #子类别</span><br><span class="line">    main_type = &#x27;&#x27; #主类别</span><br><span class="line">    exist = False</span><br><span class="line">    # 遍历item_name_cut 里每个词语</span><br><span class="line">    for temp in row:</span><br><span class="line">        # 如果词语包含在category_config_map里面，打上子类和主类标签</span><br><span class="line">        if temp in category_config_map:</span><br><span class="line">            sub_type = category_config_map.get(temp)[1]</span><br><span class="line">            main_type = category_config_map.get(temp)[0]</span><br><span class="line">            exist = True</span><br><span class="line">            break</span><br><span class="line">    if not exist:</span><br><span class="line">        sub_type= &#x27;其他&#x27;</span><br><span class="line">        main_type = &#x27;其他&#x27;</span><br><span class="line">        </span><br><span class="line">    return [sub_type, main_type]</span><br><span class="line"></span><br><span class="line"># 将子类别sub_type新增为一列</span><br><span class="line">data[&#x27;sub_type&#x27;] = data[&#x27;item_name_cut&#x27;].map(lambda r:func1(r)[0])</span><br><span class="line"># 将主类别main-type新增为一列</span><br><span class="line">data[&#x27;main_type&#x27;] = data[&#x27;item_name_cut&#x27;].map(lambda r:func1(r)[1])</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><br> <img src="/img/图片23.png" alt=""><br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 将“是否男士专用”新增为一列</span><br><span class="line">gender = []</span><br><span class="line">for i in range(len(data)):</span><br><span class="line">    if &#x27;男&#x27; in data.item_name_cut[i]:</span><br><span class="line">        gender.append(&#x27;是&#x27;)</span><br><span class="line">    elif &#x27;男士&#x27; in data.item_name_cut[i]:</span><br><span class="line">        gender.append(&#x27;是&#x27;)</span><br><span class="line">    elif &#x27;男生&#x27; in data.item_name_cut[i]:</span><br><span class="line">        gender.append(&#x27;是&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        gender.append(&#x27;否&#x27;)</span><br><span class="line">        </span><br><span class="line"># 将“是否男士专用”新增为一列</span><br><span class="line">data[&#x27;是否男士专用&#x27;] = gender</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><br><img src="/img/图片24.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 新增销售额、购买日期（天）为一列</span><br><span class="line"># 销售额=销售量*价格</span><br><span class="line">data[&#x27;销售额&#x27;] = data.sale_count*data.price</span><br><span class="line"></span><br><span class="line"># 新增购买日期为一列</span><br><span class="line"># 转换时间格式</span><br><span class="line">data[&#x27;update_time&#x27;] = pd.to_datetime(data[&#x27;update_time&#x27;])</span><br><span class="line"></span><br><span class="line">data[[&#x27;update_time&#x27;]].head()</span><br></pre></td></tr></table></figure><br>    update_time<br>0    2016-11-14<br>1    2016-11-14<br>2    2016-11-14<br>3    2016-11-14<br>4    2016-11-14<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 将时间设置为新的index</span><br><span class="line">data = data.set_index(&#x27;update_time&#x27;)</span><br><span class="line"></span><br><span class="line"># 新增时间“天”为一列</span><br><span class="line">data[&#x27;day&#x27;] = data.index.day #由于 update_time 现在是索引，直接用 .index.day 提取日期的“日”部分。</span><br><span class="line"></span><br><span class="line"># 删除中文分词的一列</span><br><span class="line">del data[&#x27;item_name_cut&#x27;] #存储的是商品标题的分词结果，后续不再需要了，所以用 del 删除，节省内存</span><br><span class="line"># 查看最终数据表格</span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><br><img src="/img/图片25.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 保存清理好的数据为Excel格式</span><br><span class="line">data.to_excel(&#x27;./clean_beautymakeup.xlsx&#x27;,sheet_name=&#x27;clean_data&#x27;)</span><br></pre></td></tr></table></figure></p><h4 id="数据探索"><a href="#数据探索" class="headerlink" title="数据探索"></a>数据探索</h4><h3 id="各品牌SKU数"><a href="#各品牌SKU数" class="headerlink" title="各品牌SKU数"></a>各品牌SKU数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt #导入 matplotlib 进行数据可视化。</span><br><span class="line">import seaborn as sns</span><br><span class="line">%matplotlib inline  # 只在 Jupyter Notebook 里有效</span><br><span class="line"></span><br><span class="line">data.columns  # 查看 DataFrame 的所有列名</span><br></pre></td></tr></table></figure><p>Index([‘id’, ‘title’, ‘price’, ‘sale_count’, ‘comment_count’, ‘店名’, ‘是否男士专用’,<br>       ‘销售额’, ‘day’],<br>      dtype=’object’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#rcParams是Matplotlib 的全局配置字典</span><br><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;]=[&#x27;SimHei&#x27;]  #指定默认字体  </span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;]=False  #解决负号&#x27;-&#x27;显示为方块的问题，Matplotlib 默认不支持中文和负号一起显示，所以需要这行代码。</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(12,7))</span><br><span class="line"># 计算各店铺的商品数量</span><br><span class="line">data[&#x27;店名&#x27;].value_counts().sort_values(ascending=False).plot.bar(width=0.8,alpha=0.6,color=&#x27;b&#x27;)</span><br><span class="line"></span><br><span class="line">plt.title(&#x27;各品牌SKU数&#x27;,fontsize=18) #给图表加标题</span><br><span class="line">plt.ylabel(&#x27;商品数量&#x27;,fontsize=14) #给 Y 轴（纵轴）加标签</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/图片26.png" alt=""><br>悦诗风吟的商品数量最多，其次为佰草集、欧莱雅</p><h3 id="品牌总销量和总销售额"><a href="#品牌总销量和总销售额" class="headerlink" title="品牌总销量和总销售额"></a>品牌总销量和总销售额</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fig,axes = plt.subplots(1,2,figsize=(12,10))</span><br><span class="line">#创建 1 行 2 列 的子图（即两个并排的图表）</span><br><span class="line">#axes 是一个包含两个子图 ax1 和 ax2 的 数组</span><br><span class="line"></span><br><span class="line">ax1 = data.groupby(&#x27;店名&#x27;).sale_count.sum().sort_values(ascending=True).plot(kind=&#x27;barh&#x27;,ax=axes[0],width=0.6)</span><br><span class="line">ax1.set_title(&#x27;品牌总销售量&#x27;,fontsize=12)</span><br><span class="line">ax1.set_xlabel(&#x27;总销售量&#x27;)</span><br><span class="line"></span><br><span class="line">ax2 = data.groupby(&#x27;店名&#x27;)[&#x27;销售额&#x27;].sum().sort_values(ascending=True).plot(kind=&#x27;barh&#x27;,ax=axes[1],width=0.6)</span><br><span class="line">ax2.set_title(&#x27;品牌总销售额&#x27;,fontsize=12)</span><br><span class="line">ax2.set_xlabel(&#x27;总销售额&#x27;)</span><br><span class="line"></span><br><span class="line">plt.subplots_adjust(wspace=0.4)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/图片27.png" alt=""><br>相宜本草的销售量和销售额都是最高的。销量第二至第五，分别为美宝莲、悦诗风吟、妮维雅、欧莱雅；销售额第二至第五，分别为欧莱雅、佰草集、美宝莲、悦诗风吟。 宝莲、悦诗风吟、欧莱雅都在销量、销售额前五中。<br>● plt.subplots(1,2)：创建 两个子图<br>● groupby(‘店名’).sum()：按品牌计算 总销售量/销售额<br>● .plot(kind=’barh’, ax=axes[i])：绘制 水平条形图<br>● plt.subplots_adjust(wspace=0.4)：调整子图间距</p><h3 id="各类别的销售量、销售额情况"><a href="#各类别的销售量、销售额情况" class="headerlink" title="各类别的销售量、销售额情况"></a>各类别的销售量、销售额情况</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">fig,axes = plt.subplots(1,2,figsize=(18,12))</span><br><span class="line"></span><br><span class="line">data1 = data.groupby(&#x27;main_type&#x27;)[&#x27;sale_count&#x27;].sum()</span><br><span class="line">ax1 = data1.plot(kind=&#x27;pie&#x27;,ax=axes[0],autopct=&#x27;%.1f%%&#x27;, # 设置百分比的格式，这里保留一位小数</span><br><span class="line">pctdistance=0.8, # 设置百分比标签与圆心的距离</span><br><span class="line">labels= data1.index,</span><br><span class="line">labeldistance = 1.05, # 设置标签与圆心的距离</span><br><span class="line">startangle = 60, # 设置饼图的初始角度</span><br><span class="line">radius = 1.2, # 设置饼图的半径</span><br><span class="line">counterclock = False, # 是否逆时针，这里设置为顺时针方向</span><br><span class="line">wedgeprops = &#123;&#x27;linewidth&#x27;: 1.2, &#125;,# 设置饼图内外边界的属性值</span><br><span class="line">textprops = &#123;&#x27;fontsize&#x27;:16, &#x27;color&#x27;:&#x27;k&#x27;,&#x27;rotation&#x27;:80&#125;, # 设置文本标签的属性值</span><br><span class="line">)</span><br><span class="line">ax1.set_title(&#x27;主类别销售量占比&#x27;,fontsize=20)</span><br><span class="line"></span><br><span class="line">data2 = data.groupby(&#x27;sub_type&#x27;)[&#x27;sale_count&#x27;].sum()</span><br><span class="line">ax2 = data2.plot(kind=&#x27;pie&#x27;,ax=axes[1],autopct=&#x27;%.1f%%&#x27;, </span><br><span class="line">pctdistance=0.8, </span><br><span class="line">labels= data2.index,</span><br><span class="line">labeldistance = 1.05,</span><br><span class="line">startangle = 230, </span><br><span class="line">radius = 1.2, </span><br><span class="line">counterclock = False, </span><br><span class="line">wedgeprops = &#123;&#x27;linewidth&#x27;: 1.2, &#125;,</span><br><span class="line">textprops = &#123;&#x27;fontsize&#x27;:16, &#x27;color&#x27;:&#x27;k&#x27;,&#x27;rotation&#x27;:80&#125;, </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ax2.set_title(&#x27;子类别销售量占比&#x27;,fontsize=20)</span><br><span class="line"></span><br><span class="line"># 设置坐标标签</span><br><span class="line">ax1.set_xlabel(..., fontsize=16,labelpad=38.5)</span><br><span class="line">ax1.set_ylabel(..., fontsize=16,labelpad=38.5)</span><br><span class="line">ax2.set_xlabel(..., fontsize=16,labelpad=38.5)</span><br><span class="line">ax2.set_ylabel(..., fontsize=16,labelpad=38.5)</span><br><span class="line">plt.subplots_adjust(wspace=0.4)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/img/图片28.png" alt=""></p><p>从主类别销售量占比情况来看，护肤品的销量远大于化妆品；<br>从子类别销售量占比情况来看，底妆类、口红类在化妆品中销量最多，清洁类、化妆水、面霜类在护肤品中销量最多。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(18,8))</span><br><span class="line">sns.barplot(x=&#x27;店名&#x27;,y=&#x27;sale_count&#x27;,hue=&#x27;main_type&#x27;,data=data,saturation=0.75,ci=0)# 分组依据：主类别（用颜色区分）</span><br><span class="line">plt.title(&#x27;各品牌各总类的总销量&#x27;, fontsize=20)</span><br><span class="line">plt.ylabel(&#x27;销量&#x27;,fontsize=16)</span><br><span class="line">plt.xlabel(&#x27;店名&#x27;,fontsize=16)</span><br><span class="line">plt.text(0,78000,&#x27;注：此处也可使用堆叠图，对比效果更直观&#x27;,</span><br><span class="line">         verticalalignment=&#x27;top&#x27;, horizontalalignment=&#x27;left&#x27;,color=&#x27;gray&#x27;, fontsize=10)</span><br><span class="line"># 设置刻度字体大小</span><br><span class="line"></span><br><span class="line">plt.xticks(fontsize=16,rotation=45)</span><br><span class="line">plt.yticks(fontsize=16)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><img src="/img/图片29.png" alt=""></p><p>各品牌的化妆品、护肤品销量、销售情况均不一样，这与品牌的定位有关， 有的品牌主打化妆品，化妆品会表现好很多，如蜜丝佛陀等。主打护肤品的品牌，护肤品的销量销售额会表现好很多，如欧莱雅、佰草集等。 有的品牌如美宝莲、兰蔻、悦诗风吟，化妆品和护肤品的销售、销售额都还不错。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(18,8))</span><br><span class="line">sns.barplot( x = &#x27;店名&#x27;,</span><br><span class="line">y = &#x27;销售额&#x27;,hue = &#x27;main_type&#x27;,data =data,saturation = 0.75,ci=0,)</span><br><span class="line">plt.ylabel(&#x27;销售额&#x27;,fontsize=16)</span><br><span class="line">plt.xlabel(&#x27;店名&#x27;,fontsize=16)</span><br><span class="line">plt.title(&#x27;各品牌各总类的总销售额&#x27;,fontsize=20)</span><br><span class="line"># 设置刻度字体大小</span><br><span class="line">plt.xticks(fontsize=16,rotation=45)</span><br><span class="line">plt.yticks(fontsize=16)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><img src="/img/图片30.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (16,6))</span><br><span class="line">sns.barplot( x = &#x27;店名&#x27;,</span><br><span class="line">y = &#x27;sale_count&#x27;,hue = &#x27;sub_type&#x27;,data =data,saturation = 0.75,ci=0)</span><br><span class="line">plt.title(&#x27;各品牌各子类的总销量&#x27;)</span><br><span class="line">plt.ylabel(&#x27;销量&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br><img src="/img/图片32.png" alt=""></p><h3 id="各品牌热度"><a href="#各品牌热度" class="headerlink" title="各品牌热度"></a>各品牌热度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize = (12,6))</span><br><span class="line">data.groupby(&#x27;店名&#x27;).comment_count.mean().sort_values(ascending=False).plot(kind=&#x27;bar&#x27;,width=0.8)</span><br><span class="line">plt.title(&#x27;各品牌商品的平均评论数&#x27;)</span><br><span class="line">plt.ylabel(&#x27;评论数&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p> <img src="/img/图片33.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(18,12))</span><br><span class="line"></span><br><span class="line"># 获取数据（已经是Series/数组）</span><br><span class="line">x = data.groupby(&#x27;店名&#x27;)[&#x27;sale_count&#x27;].mean().values</span><br><span class="line">y = data.groupby(&#x27;店名&#x27;)[&#x27;comment_count&#x27;].mean().values</span><br><span class="line">s = data.groupby(&#x27;店名&#x27;)[&#x27;price&#x27;].mean().values</span><br><span class="line">txt = data.groupby(&#x27;店名&#x27;).id.count().index</span><br><span class="line"></span><br><span class="line"># 绘图（直接传递数组）</span><br><span class="line">sns.scatterplot(x=x, y=y, size=s, hue=s, sizes=(100,1500))</span><br><span class="line"></span><br><span class="line"># 添加标签</span><br><span class="line">for i in range(len(txt)):</span><br><span class="line">    plt.annotate(txt[i], xy=(x[i], y[i]))</span><br><span class="line"></span><br><span class="line">plt.ylabel(&#x27;热度&#x27;)</span><br><span class="line">plt.xlabel(&#x27;销量&#x27;)</span><br><span class="line">plt.legend(loc=&#x27;upper left&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br> <img src="/img/图片34.png" alt=""></p><p>由上图所示：<br>越靠上的品牌热度越高，越靠右的品牌销量越高，颜色越深圈越大价格越高<br>热度与销量呈现一定的正相关； 美宝莲热度第一，销量第二，妮维雅热度第二，销量第四，两者价格均相对较低； 价格低的品牌热度和销量相对较高，价格高的品牌热度和销量相对较低，说明价格在热度和销量中有一定影响；</p><h3 id="各品牌价格"><a href="#各品牌价格" class="headerlink" title="各品牌价格"></a>各品牌价格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查看价格的箱型图</span><br><span class="line">plt.figure(figsize=(18,10))</span><br><span class="line">sns.boxplot(x=&#x27;店名&#x27;,y=&#x27;price&#x27;,data=data)</span><br><span class="line">plt.ylim(0,3000)#如果不限制，就不容易看清箱型，所以把Y轴刻度缩小为0-3000</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p> <img src="/img/图片35.png" alt=""><br>   图中显示了不同类别的数据分布情况，通过比较中位数、四分位距和异常值，可以看出各类别之间的差异。<br>   某些类别的数据分布较广且中心趋势较高，而另一些则较为集中且较低。<br>   异常值的存在可能需要进一步调查，以确定是否为数据错误或特殊原因导致。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data.groupby(&#x27;店名&#x27;).price.sum()</span><br><span class="line">avg_price=data.groupby(&#x27;店名&#x27;).price.sum()/data.groupby(&#x27;店名&#x27;).price.count()</span><br><span class="line">avg_price</span><br></pre></td></tr></table></figure><br>店名     AVG<br>SKII    1011.727079<br>佰草集      289.823171<br>倩碧       346.092190<br>兰芝       356.615809<br>兰蔻       756.400778<br>妮维雅       73.789053<br>娇兰      1361.043588<br>悦诗风吟     121.245945<br>植村秀      311.786667<br>欧珀莱      276.218543<br>欧莱雅      167.282698<br>玉兰油      329.657294<br>相宜本草     122.958446<br>美加净       44.694619<br>美宝莲      148.757576<br>自然堂      180.130213<br>薇姿       281.085791<br>蜜丝佛陀     142.118894<br>资生堂      577.438490<br>雅漾       212.618401<br>雅诗兰黛     872.470718<br>雪花秀      901.082873<br>Name: price, dtype: float64<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure(figsize=(12,6))</span><br><span class="line">avg_price.sort_values(ascending=False).plot(kind=&#x27;bar&#x27;,width=0.8,alpha=0.6,color=&#x27;b&#x27;,label=&#x27;各品牌平均价格&#x27;)</span><br><span class="line">y = data[&#x27;price&#x27;].mean()</span><br><span class="line">plt.axhline(y,0,5,color=&#x27;r&#x27;,label=&#x27;全品牌平均价格&#x27;) #添加了一条水平线，表示所有品牌的平均价格</span><br><span class="line">plt.ylabel(&#x27;各品牌平均价格&#x27;)</span><br><span class="line">plt.title(&#x27;各品牌产品的平均价格&#x27;,fontsize=24)</span><br><span class="line">plt.legend(loc=&#x27;best&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br> <img src="/img/图片36.png" alt=""></p><p>娇兰、SKII、雪花秀、雅诗兰黛、兰蔻、资生堂这几个国际大牌的产品价格很高，产品平均价格都在500以上，都是一线大牌；<br>兰芝、倩碧、玉兰油、植村秀、佰草集、薇姿、雅漾的平均价格在300-400元左右，其中佰草集是最贵的国货品牌；<br>美加净作为国货品牌，性价比高，平均价格最低，妮维雅的平均价格第二低，在100元左右；<br>全品牌平均价格低于400元，除了前五个国际大牌其余品牌的平均价格都低于全品牌平均价格<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(18,10))</span><br><span class="line"></span><br><span class="line"># 准备数据（确保使用.values转换为数组）</span><br><span class="line">x = data.groupby(&#x27;店名&#x27;)[&#x27;sale_count&#x27;].mean().values  # 平均销量</span><br><span class="line">y = data.groupby(&#x27;店名&#x27;)[&#x27;销售额&#x27;].mean().values     # 平均销售额</span><br><span class="line">s = avg_price.values if hasattr(avg_price, &#x27;values&#x27;) else avg_price  # 平均价格（确保是数组）</span><br><span class="line">txt = data.groupby(&#x27;店名&#x27;).id.count().index          # 店铺名称</span><br><span class="line"></span><br><span class="line"># 绘制散点图（统一用数组传参）</span><br><span class="line">sns.scatterplot(</span><br><span class="line">    x=x, </span><br><span class="line">    y=y, </span><br><span class="line">    size=s, </span><br><span class="line">    sizes=(100,1500), </span><br><span class="line">    marker=&#x27;v&#x27;, </span><br><span class="line">    alpha=0.5, </span><br><span class="line">    color=&#x27;b&#x27;  # 所有点用蓝色，若需按颜色分类改用hue参数</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 添加标签</span><br><span class="line">for i in range(len(txt)):</span><br><span class="line">    plt.annotate(</span><br><span class="line">        txt[i], </span><br><span class="line">        xy=(x[i], y[i]), </span><br><span class="line">        xytext=(x[i]+0.2, y[i]+0.2)  # 标签位置微调</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">plt.ylabel(&#x27;销售额&#x27;)</span><br><span class="line">plt.xlabel(&#x27;销量&#x27;)</span><br><span class="line">plt.legend(loc=&#x27;upper left&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br> <img src="/img/图片37.png" alt=""><br>由上图所示，越靠上代表销售额越高，越靠左代表销量越高，图形越大代表平均价格越高<br>销售量和销售额呈现正相关；<br>相宜本草、美宝莲、蜜丝佛陀销量和销售额位居前三，且平均价格居中；<br>说明销量销售额与价格有很重要的联系；</p><h3 id="男性护肤品销量情况"><a href="#男性护肤品销量情况" class="headerlink" title="男性护肤品销量情况"></a>男性护肤品销量情况</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gender_data=data[data[&#x27;是否男士专用&#x27;]==&#x27;是&#x27;]</span><br><span class="line">gender_data_1=gender_data[(gender_data.main_type ==&#x27;护肤品&#x27;)| (gender_data.main_type==&#x27;化妆品&#x27;)]</span><br><span class="line">plt.figure(figsize = (12,6))</span><br><span class="line">sns.barplot(x=&#x27;店名&#x27;,y=&#x27;sale_count&#x27;,hue=&#x27;main_type&#x27;,data =gender_data_1,saturation=0.75,ci=0,)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p> <img src="/img/图片38.png" alt=""><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f,[ax1,ax2]=plt.subplots(1,2,figsize=(12,6))</span><br><span class="line">gender_data.groupby(&#x27;店名&#x27;).sale_count.sum().sort_values(ascending=True).plot(kind=&#x27;barh&#x27;,width=0.8,ax=ax1)</span><br><span class="line">ax1.set_title(&#x27;男士护肤品销量排名&#x27;)</span><br><span class="line"></span><br><span class="line">gender_data.groupby(&#x27;店名&#x27;).销售额.sum().sort_values(ascending=True).plot(kind=&#x27;barh&#x27;,width=0.8,ax=ax2)</span><br><span class="line">ax2.set_title(&#x27;男士护肤品销售额排名&#x27;)</span><br><span class="line"></span><br><span class="line">plt.subplots_adjust(wspace=0.4)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br> <img src="/img/图片39.png" alt=""><br>男士购买的大多是护肤品；<br>妮维雅是男生护肤品中销量遥遥领先的品牌，第二第三分别为欧莱雅、相宜本草</p><h3 id="分析时间与销量的关系，体现购买高峰期"><a href="#分析时间与销量的关系，体现购买高峰期" class="headerlink" title="分析时间与销量的关系，体现购买高峰期"></a>分析时间与销量的关系，体现购买高峰期</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib.pyplot import MultipleLocator</span><br><span class="line">plt.figure(figsize = (12,6))</span><br><span class="line">day_sale=data.groupby(&#x27;day&#x27;)[&#x27;sale_count&#x27;].sum()</span><br><span class="line">day_sale.plot()</span><br><span class="line">plt.grid(linestyle=&quot;-.&quot;,color=&quot;gray&quot;,axis=&quot;x&quot;,alpha=0.5)</span><br><span class="line">x_major_locator=MultipleLocator(1)  #把x轴的刻度间隔设置为1，并存在变量里</span><br><span class="line">ax=plt.gca()  #ax为两条坐标轴的实例</span><br><span class="line">ax.xaxis.set_major_locator(x_major_locator)</span><br><span class="line">#把x轴的主刻度设置为1的倍数</span><br><span class="line">plt.xlabel(&#x27;日期（11月）&#x27;,fontsize=12)</span><br><span class="line">plt.ylabel(&#x27;销量&#x27;,fontsize=12)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p> <img src="/img/图片40.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>品牌SKU数量分析<br>● 悦诗风吟 的SKU数量最多，表明其产品线丰富，能够满足多样化的消费者需求，覆盖更广泛的市场细分。</li><li>总销售量和销售额表现<br>● 相宜本草 和 欧莱雅 在总销售量和销售额上表现最为突出，显示出这两个品牌在市场中具有较强的竞争力和消费者认可度。</li><li>主类别销售量占比<br>● 护肤品 类别的销量占比最高，其中 清洁类 和 化妆水类 产品最受欢迎，反映了消费者对基础护肤需求的高频次和高关注度。</li><li>各品牌平均评论数<br>● 美宝莲 的平均评论数位居榜首，可能得益于其高性价比的产品定位或高效的营销策略，吸引了大量用户反馈。</li><li>各品牌平均价格对比<br>● 娇兰 和 SKII 的平均价格最高，体现了其高端市场定位；而 美加净 的平均价格最低，可能更适合预算有限的消费者群体。</li><li>销量与销售额的关系<br>● 销量和销售额呈现显著的正相关关系，但产品价格仍是影响消费者购买决策的关键因素之一。</li></ol><p>美妆类别中护肤品销量远大于化妆品，其中清洁类、化妆水、面霜等基础护肤类销量最高；<br>男士购买美妆集中在护肤品类，其中妮维雅品牌是最受男士喜爱的品牌；<br>价格和热度对销售量有关联，平价基础产品是大多数消费者的选择；<br>由于商家在双十一提前预热，巨大的优惠力度和为了避免网络高峰，不少消费者选择提前消费，销量高峰出现在双十一前几天；双十一后3天商家持续打折优惠，消费者还保有购物余热，但远不如双十一之前。</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>一、库存管理优化<br>重点品牌：悦诗风吟（SKU数量领先）<br>建议措施：<br>• 建立智能库存预警系统，实现库存周转实时监控<br>• 实施ABC分类管理法，差异化制定补货策略<br>• 针对畅销SKU设置安全库存，滞销品及时清仓</p><p>二、价格策略优化<br>高端品牌：娇兰、SK-II（高单价定位）<br>战略调整：<br>• 推出轻奢系列产品线，降低消费门槛<br>• 设计会员专属礼盒，提升复购率<br>• 开发节日限定套装，增强礼品属性</p><p>三、促销策略升级<br>关键时机：大促高峰期<br>执行方案：<br>• 建立72小时倒计时营销机制<br>• 设置阶梯式满减优惠（满300减50等）<br>• 针对高价值客户推送专属优惠</p><p>四、客户体验提升<br>标杆品牌：美宝莲（评论互动活跃）<br>改进方向：<br>• 建立月度消费者满意度追踪体系<br>• 重点优化差评集中的产品功能<br>• 开展新品试用官招募计划</p><p>五、市场细分运营<br>核心品类：<br>• 护肤品（清洁类、化妆水类）<br>• 化妆品（彩妆系列）<br>定制策略：<br>• 分肤质开发专属产品组合<br>• 打造场景化使用方案（晨间/夜间）<br>• 加强达人种草内容投放</p><p>六、产品创新规划<br>潜力品类：新兴细分市场产品<br>开发重点：<br>• 每季度开展竞品分析<br>• 建立产品创新实验室<br>• 实施”爆品孵化”计划<br>消费者对产品价格和热度关注度较高，品牌可以适当调整产品价格并通过诸如网络社交平台的方式提高品牌热度；<br>对于男性消费者，品牌可以定向推荐平价基础护肤产品，在销量中可以看到也有一部分男性购买化妆品，品牌可以在护肤品中适当捆绑化妆品产品带动消费；<br>消费者购买欲望并不集中在双十一当天，商家可以提前预热加大优惠力度刺激消费者提前消费，避免网络高峰。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Excel转Word</title>
      <link href="/2025/03/20/Excel%E5%88%B0Word%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2025/03/20/Excel%E5%88%B0Word%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>Excel到Word之间的转换<br>引言<br>以下是两份Excel，但是内容的呈现不是特别高效，所以打算转到Word报告方便传上企业微信，飞书等</p><p>需求：日常工作中，需要对Excel表格的数据进行筛选计算整理，然后将数据做成Word报告。Word报告的格式已经标准化，数据填入Word过程机械化、耗费时间。<br>本节通过使用Python进行自动化生成Word极大提高效率。</p><p>准备工作<br>使用到Python.docx库<br>在官方的样例代码可以找到如下<br><img src="/img/图片1.png" alt=""><br>我们将的Excel表格中的有效信息手动输入到Word中为：</p><p>结构为：<br>品牌名称<br>视频标题<br>视频脚本</p><p>安装python-docx库<br>打开jupyter</p><p>在终端输入pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> python-docx</p><p>再打开jupyter<br>新建py note</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from docx import Document</span><br><span class="line">from docx.shared import Inches</span><br><span class="line"></span><br><span class="line">document = Document()</span><br><span class="line"></span><br><span class="line">document.add_heading(&#x27;Document Title&#x27;, 0)</span><br><span class="line"></span><br><span class="line">p = document.add_paragraph(&#x27;A plain paragraph having some &#x27;)</span><br><span class="line">p.add_run(&#x27;bold&#x27;).bold = True</span><br><span class="line">p.add_run(&#x27; and some &#x27;)</span><br><span class="line">p.add_run(&#x27;italic.&#x27;).italic = True</span><br><span class="line"></span><br><span class="line">document.add_heading(&#x27;Heading, level 1&#x27;, level=1)</span><br><span class="line">document.add_paragraph(&#x27;Intense quote&#x27;, style=&#x27;Intense Quote&#x27;)</span><br><span class="line"></span><br><span class="line">document.add_paragraph(</span><br><span class="line">    &#x27;first item in unordered list&#x27;, style=&#x27;List Bullet&#x27;</span><br><span class="line">)</span><br><span class="line">document.add_paragraph(</span><br><span class="line">    &#x27;first item in ordered list&#x27;, style=&#x27;List Number&#x27;</span><br><span class="line">)</span><br><span class="line">document.add_page_break()</span><br><span class="line"></span><br><span class="line">document.save(&#x27;demo1.docx&#x27;)</span><br></pre></td></tr></table></figure><p>就可以在对应文件夹上找到生成的demo1文档，并且内容如下<br> <img src="/img/图片2.png" alt=""></p><p>对比上面的代码可以知道结构对应的函数</p><p>结构为：<br>品牌名称  标题一  add_heading<br>视频标题  标题二  add_heading<br>视频脚本  正文    add_paragraph</p><p>输入以下代码：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from docx import Document</span><br><span class="line">document = Document() #就是添加一个新的文档的意思</span><br><span class="line"></span><br><span class="line">document.add_heading(&#x27;罗杰夫&#x27;, level=1)</span><br><span class="line">document.add_heading(&#x27;答应我，不做臭男人#糟糕是心动的感觉 #恋爱的感觉 @小奈奈✈️ #男神必备 #颜值爆表 &#x27;, level=2)</span><br><span class="line">document.add_paragraph(&#x27;好香的所有风云一次大步往前走&#x27;)</span><br><span class="line">document.save(&#x27;demo1.docx&#x27;)</span><br></pre></td></tr></table></figure></p><p>打开文档可以发现按照想要的格式变成Word了<br> <img src="/img/图片3.png" alt=""><br>Excel到Word的基本转换<br>接下来就是换成所有内容，不断循环上面的代码</p><p>使用pandas和for循环进行<br>使用pandas读取Excel文件<br>加载数据：<br>路径：/ video_list.xlsx<br>     / speech_text.xlsx,都在同一路径下<br>pandas.read_excel()的作用：将Excel文件读取到pandas DataFrame中。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">video_list = pd.read_excel(&#x27;video_list.xlsx&#x27;) #读取Excel并传给新建的video_list</span><br><span class="line">speech_text = pd.read_excel (&#x27;speech_text.xlsx&#x27;)</span><br></pre></td></tr></table></figure><br>数据合并与处理<br>使用info查看参数的类型<br>video_list.info()<br>发现id是int类型的，我们转换成字符串<br> <img src="/img/图片4.png" alt=""></p><p>使用 Pandas 的 astype 方法将数据帧（DataFrame）或序列（Series）中的数据类型转换为字符串类型<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">video_list[&#x27;AwemeId&#x27;] = video_list[&#x27;AwemeId&#x27;].astype(str)</span><br></pre></td></tr></table></figure><br>同理speech_text也是一样<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">speech_text[&#x27;VideoId&#x27;] = speech_text[&#x27;VideoId&#x27;].astype(str)</span><br></pre></td></tr></table></figure><br>将两表连起来，使用内连接，可以保留两个数据集中同时存在的样本，这些样本的其他特征都会保留，这里键不一样要说出左表和右表的列名<br>内连接的使用方法<br>left: 拼接的左侧DataFrame对象<br>right: 拼接的右侧DataFrame对象<br>on: 要加入的列或索引级别名称。 必须在左侧和右侧DataFrame对象中找到。 如果未传递且left_index和right_index为False，则DataFrame中的列的交集将被推断为连接键。<br>left_on:左侧DataFrame中的列或索引级别用作键。 可以是列名，索引级名称，也可以是长度等于DataFrame长度的数组。<br>right_on: 左侧DataFrame中的列或索引级别用作键。 可以是列名，索引级名称，也可以是长度等于DataFrame长度的数组。<br>合并两个DataFrame<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">merge =pd.merge(video_list, speech_text, how=&#x27;inner&#x27;,left_on=&#x27;AwemeId&#x27;,right_on=&#x27;VideoId&#x27;)</span><br></pre></td></tr></table></figure><br>自动化生成Word报告<br>使用for循环写入代码，实现转换<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">document = Document()</span><br><span class="line">for i in range(len(merge)):</span><br><span class="line"> print(merge.iloc[i][&#x27;品牌&#x27;])</span><br><span class="line"> document.add_heading(merge.iloc[i][&#x27;品牌&#x27;], level=1)</span><br><span class="line"> document.add_heading(merge.iloc[i][&#x27;视频标题&#x27;], level=2)</span><br><span class="line"> document.add_paragraph(merge.iloc[i][&#x27;视频文案&#x27;])</span><br><span class="line"> document.save(&#x27;demo.docx&#x27;)  </span><br></pre></td></tr></table></figure><br> <img src="/img/图片5.png" alt=""></p><p>优化报告生成过程<br>把相同品牌的合并掉，每个品牌只出现一次</p><p>思路就判断当前数据的品牌是否与上一条相同，不同就正常打印，相同就不打印名称，当然当索引为0时也正常打印。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">document = Document()</span><br><span class="line">for i in range(len(merge)):</span><br><span class="line">    if merge.iloc[i][&#x27;品牌&#x27;] != merge.iloc[i-1][&#x27;品牌&#x27;] or i == 0:</span><br><span class="line">        print(merge.iloc[i][&#x27;品牌&#x27;])</span><br><span class="line">        document.add_heading(merge.iloc[i][&#x27;品牌&#x27;], level=1)</span><br><span class="line">        document.add_heading(merge.iloc[i][&#x27;视频标题&#x27;], level=2)</span><br><span class="line">        document.add_paragraph(merge.iloc[i][&#x27;视频文案&#x27;])</span><br><span class="line">document.save(&#x27;demo.docx&#x27;)</span><br></pre></td></tr></table></figure><br>结果如下：<br> <img src="/img/图片6.png" alt=""></p><p>接着优化，将不同列名输入进来，比如昵称，视频地址等<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">document = Document()</span><br><span class="line">for i in range(len(merge)):</span><br><span class="line">    if merge.iloc[i][&#x27;品牌&#x27;] != merge.iloc[i-1][&#x27;品牌&#x27;] or i == 0:</span><br><span class="line">        print(merge.iloc[i][&#x27;品牌&#x27;]) </span><br><span class="line">        document.add_heading(merge.iloc[i][&#x27;品牌&#x27;], level=1)</span><br><span class="line">        document.add_heading(merge.iloc[i][&#x27;视频标题&#x27;], level=2)</span><br><span class="line">        document.add_paragraph(f&#x27;达人昵称: &#123;merge.iloc[i][&quot;BloggerName&quot;]&#125;&#x27;) </span><br><span class="line">        document.add_paragraph(f&#x27;视频地址:douyin.com/video/ &#123;merge.iloc[i][&quot;AwemeId&quot;]&#125;&#x27;)  #这里字段名要用双引号括起来，不然py会误判结束位置</span><br><span class="line">        document.add_paragraph(merge.iloc[i][&#x27;视频文案&#x27;])</span><br><span class="line">document.save(&#x27;demo.docx&#x27;)</span><br></pre></td></tr></table></figure><br>结果：</p><p> <img src="/img/图片7.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Excel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tableau-数据分层-数据组-数据集</title>
      <link href="/2025/03/20/tableau-%E6%95%B0%E6%8D%AE%E5%88%86%E5%B1%82-%E6%95%B0%E6%8D%AE%E7%BB%84-%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
      <url>/2025/03/20/tableau-%E6%95%B0%E6%8D%AE%E5%88%86%E5%B1%82-%E6%95%B0%E6%8D%AE%E7%BB%84-%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>本节介绍：<br><img src="/img/1.png" alt=""></p><h3 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a><strong>分层结构</strong></h3><h4 id="分层结构概念"><a href="#分层结构概念" class="headerlink" title="分层结构概念"></a><strong>分层结构概念</strong></h4><p>分层结构是一种维度之间自上而下的组织形式，Tableau默认包含对某些字段的分层结构，比如日期、日期与时间、地理角色，以日期为例，日期本来就包括年、月、日的层次结构。</p><p>将数据连接好创建工作表，得到基本图</p><p><img src="/img/2.png" alt=""></p><p>在列处点击年旁边的加号可以进行下钻，扩展成季度</p><p>再下钻变成月，这就是<strong>数据分层</strong>，<strong>年-季度-月</strong></p><p><img src="/img/3.png" alt=""></p><p>分层结构实例：</p><p> 打开‘<strong>人工坐席接听数据.xlsx</strong>’并连接</p><h4 id="创建分层结构"><a href="#创建分层结构" class="headerlink" title="创建分层结构"></a><strong>创建分层结构</strong></h4><p>方法一：<strong>右键-分层结构-创建分层结构</strong></p><p><img src="/img/4.png" alt=""></p><p>方法二：直接把需要分层的两个维度拖到一起</p><p><img src="/img/5.png" alt=""></p><h4 id="分层实例"><a href="#分层实例" class="headerlink" title="分层实例"></a>分层实例</h4><p>创建完结构后以<strong>柱状图</strong>为例</p><p>按顺序把不同维度拖入到层级中，注意要按照大小，比如组是在部的下面，顺序依次是中心、部、组、班。</p><p><img src="/img/6.png" alt=""></p><p> 接下来把中心-列，并且下钻，接听量-行</p><p><a href="/img/7.png"></a></p><p>拖入接听量进标签并设置格式，数据更简洁</p><p><a href="/img/8.png"></a></p><p>下钻发现异常，将异常数据删掉</p><p><a href="/img/9.png"></a></p><p>排除异常后上钻即可。</p><p>下面以<strong>折线图</strong>为例</p><p>将日期-&gt;列，中心-&gt;行，平均通话时长-&gt;行,日期换成天</p><p><a href="/img/10.png"></a></p><p>把中心往下钻</p><p><a href="/img/11.png"></a></p><p>这样就能知道每个组每个班不同客服的通话情况</p><p>最后，<strong>层级是不可以嵌套。</strong></p><h3 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a><strong>数据分组</strong></h3><p>组不可以用于创建字段，不能出现在公式中</p><p>将数据拖入行列中</p><p><img src="https://i-blog.csdnimg.cn/direct/864912757de349539fdf05914c48eabf.png" alt=""></p><h4 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h4><p>方法一：直接在数据中<strong>右键-分组</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/597dd53b74774793861495485b9b5a02.png" alt=""></p><p>方法二：右键直接点对应的<strong>维度-创建-组</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/e352005e70184bb49644d09969e35230.png" alt=""></p><h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><p>创建好后，可以进行编辑</p><p><img src="https://i-blog.csdnimg.cn/direct/de48063c8ac44598aa6f6382dba430fc.png" alt=""></p><p>对不同数据进行清洗处理，比如15班的几个子集分成同一个组，按住ctrl可以多选，然后右键。</p><p><img src="https://i-blog.csdnimg.cn/direct/6131d26b62c347e5b89f81203492bb39.png" alt=""></p><p><img src="https://i-blog.csdnimg.cn/direct/24be3ce7681f4a768ec9b5c13be7ad45.png" alt=""></p><p>不同数据进行合并后：</p><p><img src="https://i-blog.csdnimg.cn/direct/4b37a58cdd10413a83d64d7f3f5541bb.png" alt=""></p><p>这里的“其他”是除了已经有的归类的其他剩下来的班，和“其他组”并不一样。这里的“其他”只是除了11班，13班，15班以外的数字班。而“其他”是奇奇怪怪的组，可以说是“异类”。</p><p><img src="https://i-blog.csdnimg.cn/direct/88163a8732c44eaca6f760879ab8b756.png" alt=""><img src="https://i-blog.csdnimg.cn/direct/ee2c464555c64a96845f5b9c424cbeee.png" alt=""></p><p>这样，把创建并处理好的组代替原来的班</p><p><img src="https://i-blog.csdnimg.cn/direct/f6f07a8e5dd048bcad9ccaad2563848f.png" alt=""></p><p>同时还能把“其他”筛选进来</p><p><img src="https://i-blog.csdnimg.cn/direct/555e3e9b037249e9a3479a1b6297fd3b.png" alt=""></p><p>然后升序降序，使图形更加完善</p><p><img src="https://i-blog.csdnimg.cn/direct/4f64affd57604c7b9e6b11aa51024225.png" alt=""></p><h4 id="实例2：电量销售数据按地理区域分组"><a href="#实例2：电量销售数据按地理区域分组" class="headerlink" title="实例2：电量销售数据按地理区域分组"></a>实例2：电量销售数据按地理区域分组</h4><p> 打开‘<strong>各省市售电量数据.xlsx</strong>’并连接</p><p>进行数据处理，将未知的地理角色进行筛选，省市选择省，城市则选择城市。</p><p><img src="https://i-blog.csdnimg.cn/direct/ba2556f083fa49738141f53a8e0970ff.png" alt=""></p><p>处理完后把省市拖到详细信息处</p><p><img src="https://i-blog.csdnimg.cn/direct/5b495a0e3b0e47138425a327a2ae7458.png" alt=""></p><p>将三个未知位置选择到正确省份</p><p><img src="https://i-blog.csdnimg.cn/direct/f126a8cab8604cb08c8f01948a9704aa.png" alt=""></p><p>分组:</p><p>将黑吉辽三省左键长按框柱，<img src="https://i-blog.csdnimg.cn/direct/427eb94703bf4a589d8881b625016cf6.png" alt=""></p><p>再右键分组</p><p><img src="https://i-blog.csdnimg.cn/direct/c54c3e7fc0434d5b8c6ef9df64988e00.png" alt=""></p><p>华东：<img src="https://i-blog.csdnimg.cn/direct/14e2ca662cc740bfa1ac4bfd9ad716c6.png" alt=""></p><p>华北：<img src="https://i-blog.csdnimg.cn/direct/9770fb810ea34530b16e7f156a096cb2.png" alt=""></p><p>华中：<img src="https://i-blog.csdnimg.cn/direct/bd68a7444d2e42d784a3b37e16c52f64.png" alt=""></p><p>西南：<img src="https://i-blog.csdnimg.cn/direct/b9698bb743d040fd9473535ae33c658f.png" alt=""></p><p>西北：<img src="https://i-blog.csdnimg.cn/direct/4aec8cc9c27647bb94db0592cea7e513.png" alt=""></p><p>分完组后进行编辑</p><p><img src="https://i-blog.csdnimg.cn/direct/7be69f60ef2c48cd87501944fd01ca98.png" alt=""></p><p>按照上面的分组重命名</p><p><img src="https://i-blog.csdnimg.cn/direct/e573c47ca46d45bd838630959897b9ee.png" alt=""></p><p>创建好了组，我们进行筛选，将刚刚的组拖入到颜色中</p><p><img src="https://i-blog.csdnimg.cn/direct/272a227746af4198b7492e1942d8783a.png" alt=""></p><p>当期值拖到大小。</p><p><img src="https://i-blog.csdnimg.cn/direct/268ab93124f4411c86ac6dc78581f484.png" alt=""></p><p><img src="https://i-blog.csdnimg.cn/direct/0a731c7e503d48c9a427b41ed9e75676.png" alt=""></p><h4 id="实例3：各区域用电量"><a href="#实例3：各区域用电量" class="headerlink" title="实例3：各区域用电量"></a><strong>实例3：各区域用电量</strong></h4><p>把刚刚创建的组-中国地理区域拖到详细信息中，再把当期值拖到颜色</p><p><img src="https://i-blog.csdnimg.cn/direct/25c2084666ae4fc0852563a9bf420dff.png" alt=""></p><p><img src="https://i-blog.csdnimg.cn/direct/1558e9da9c4b4dcfb184b1700d5721a8.png" alt=""></p><p>颜色深浅代表各区域用电多少。</p><h4 id="实例4：各地区电量销售标靶图"><a href="#实例4：各地区电量销售标靶图" class="headerlink" title="实例4：各地区电量销售标靶图"></a>实例4：各地区电量销售标靶图</h4><p>中国地理区域和省市拖入行，当期值拖入列</p><p><img src="https://i-blog.csdnimg.cn/direct/2eb67a87713a40e2a2aa2a9abb6a3c95.png" alt=""></p><p>中国地理区域选择颜色</p><p><img src="https://i-blog.csdnimg.cn/direct/44a7cd549d5f41b8aaa831bf29e1a791.png" alt=""></p><p>月度计划值拖入详细信息中，然后<strong>右键-添加参考线</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/1c41e65fa022430594aa89d79c94277f.png" alt=""></p><p>在分布处进行编辑，把值换成50，100，然后线条填充自己来就行</p><p><img src="https://i-blog.csdnimg.cn/direct/1db34be1d1264201b8f3438e3f05bf61.png" alt=""></p><p><img src="https://i-blog.csdnimg.cn/direct/e992d63bc66f48d5895ae3f165e9090f.png" alt=""></p><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><h4 id="集的概念："><a href="#集的概念：" class="headerlink" title="集的概念："></a>集的概念：</h4><p><img src="https://i-blog.csdnimg.cn/direct/6f9dc32798de481a8b6cbd9abeb4a7c8.png" alt=""></p><h4 id="创建数据集"><a href="#创建数据集" class="headerlink" title="创建数据集"></a>创建数据集</h4><h5 id="静态数据集"><a href="#静态数据集" class="headerlink" title="静态数据集"></a>静态数据集</h5><p>打开‘<strong>全球超市订单数据.xlsx</strong>’并连接</p><p>国家/地区-列，利润-行，按倒序排列</p><p><img src="https://i-blog.csdnimg.cn/direct/651e73928cd74e1eb39f5d110a58274d.png" alt=""></p><p>然后找到所有负值并选取</p><p><img src="https://i-blog.csdnimg.cn/direct/ba11d9c21d6e47508eea610bc543a8a4.png" alt=""></p><p>鼠标悬浮在数据上，选择创建集</p><p><img src="https://i-blog.csdnimg.cn/direct/2a3a1036c2694b378e48b0ef63949a5f.png" alt=""></p><p>重命名为负利润国家</p><p><img src="https://i-blog.csdnimg.cn/direct/243ceba8419643bca081517bea977bbd.png" alt=""></p><p>接下来就可以对图进行一些优化，比如市场0列，然后利润拖入颜色</p><p>再编辑颜色，2阶</p><p><img src="https://i-blog.csdnimg.cn/direct/e2bd05ea08e544fe96347c8cebd7ce93.png" alt=""></p><p><img src="https://i-blog.csdnimg.cn/direct/f0455271a15745d39951d85a70cfd1fa.png" alt=""></p><p>再把细分市场拖进来，按照市场-细分市场-国家/地区的顺序</p><p><img src="https://i-blog.csdnimg.cn/direct/12c4703b4b1c41dd94893e438c3516dd.png" alt=""></p><p>按住Ctrl键选择<strong>所有负利润国家，</strong>然后<strong>右键-创建集</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/cb00140aafb84d349717dbd306aa4684.png" alt=""></p><p><img src="https://i-blog.csdnimg.cn/direct/0f6e1a68172b435c8aecdebf4aaa398f.png" alt=""></p><p>我们发现相比于负利润国家1，多了两列可筛选的条件，使得结果更精确。</p><h5 id="动态数据集"><a href="#动态数据集" class="headerlink" title="动态数据集"></a>动态数据集</h5><p>选择<strong>维度-产品名称-创建-集</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/bac45a16cba9462bbd1667c9f4dc36f7.png" alt=""></p><p>选择条件，重命名为负利润产品，按字段，筛选条件为利润&lt;=0</p><p><img src="https://i-blog.csdnimg.cn/direct/260a5fef6a214dbca56d70761e91a7df.png" alt=""></p><p>然后<strong>利润-列</strong>，<strong>负利润产品-行</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/2c92955b723c429c8630b804ccf36f44.png" alt=""></p><p>我们要看负利润产品的具体情况，在<strong>负利润产品右键-在集内显示成员</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/030e94504bb24a3ea88ec8a764b9a602.png" alt=""></p><p>就可以看到每个亏本产品的利润情况</p><p><img src="https://i-blog.csdnimg.cn/direct/cfd587a6616d414089aa71aa6a2306a2.png" alt=""></p><p><strong>通过排序创建数据集</strong></p><p>还是<strong>维度-产品名称-创建-集</strong></p><p>这次在<strong>顶部</strong>这边选择<strong>100，</strong>依据是<strong>数量</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/f75ebbe8578a45819f64a509fe076284.png" alt=""></p><h4 id="合并集"><a href="#合并集" class="headerlink" title="合并集"></a>合并集</h4><p>合并同一个维度的集</p><p>选择<strong>负利润产品-创建合并集</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/e6d7097786b84fe69e01d4e724439834.png" alt=""></p><p><img src="https://i-blog.csdnimg.cn/direct/d0043f64e6a1412dbb1c4705e2312275.png" alt=""></p><p>将地区拖到<strong>筛选器</strong>中</p><p><img src="https://i-blog.csdnimg.cn/direct/4b0a4fd1ecb14f6c86fc93180e077d08.png" alt=""></p><p>选择西亚，南亚，东亚，东南亚，中亚</p><p><img src="https://i-blog.csdnimg.cn/direct/9d0319a0b3b5434c8857afdc32ed6781.png" alt=""></p><p>选择完以后，点<strong>确定</strong>退出来后再<strong>右键-创建集</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/d35da387e34345cea2c2ae85f2d16bf0.png" alt=""></p><p>取名为<strong>亚洲地区</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/801a4414557e4b00a4d78100d8b518ce.png" alt=""></p><p>这就通过集的方式进行了快速筛选，确定了亚洲地区</p><p>最后我们用数据集进行对比分析</p><p><strong>利润-行</strong>，<strong>负利润但热销的产品-列</strong>，选择显示<strong>集内成员</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/bd16fded49d44c0aa89621a3da07a471.png" alt=""></p><p>这就看出这个产品亏损最多</p>]]></content>
      
      
      <categories>
          
          <category> Tableau </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用简单的爬虫爬取b站弹幕并生成词云图</title>
      <link href="/2025/03/20/%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/"/>
      <url>/2025/03/20/%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<p>所谓爬虫就是模拟浏览器对于服务器发送请求，通过代码去模拟浏览器来得到想要的结果。<br>爬虫代码基本实现的步骤是<br>1.发送请求，对于想要爬的视频网站的URL地址发送请求<br>2.获取数据，获取服务器返回的一个输出内容，一般长这样，有很多元素组成<br> <img src="/img/图片8.png" alt=""><br>3.解析数据，就是提取想要的数据内容，比如上面就是把弹幕的内容单独提取出来，而不要其他的数据。<br>4.保存数据，把获取下来的数据内容保存到txt文本里。</p><p>数据收集<br>发送请求<br>先导入一个模块<br>Import requests<br>这是第三方模块，没下载的需要在终端install requests一下。<br>确定URL地址，就是你想要爬的视频地址，确定好cid </p><p> <img src="/img/图片9.png" alt=""></p><p>然后是headers的请求头，作用就是进行伪装，模拟浏览器发送请求</p><p>参数就是在开发者工具里面找到的，一般只要UA就可以了。<br> <img src="/img/图片10.png" alt=""></p><p>我这里是：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0</p><p>里面包含的是浏览器的一个基本信息，比如浏览器发送过来请求的什么版本，系统之类的。类似人类的身份证。</p><p>最后通过requests模块里面get请求方法，对于url地址发送请求，并且携带上headers请求头，再用response变量去接收返回数据<br>这一步的代码就是<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">#headers请求头作用把Python代码进行伪装，模拟成浏览器去发送请求</span><br><span class="line">#user-agent浏览器基本身份标识</span><br><span class="line"># 需要先找到 `cid` 才能请求正确的弹幕 API</span><br><span class="line">cid = &quot;25750933691&quot;  # 这里的 `123456` 需要替换为真实的 `cid`</span><br><span class="line"></span><br><span class="line"># B站弹幕 API</span><br><span class="line">danmu_url = f&quot;https://api.bilibili.com/x/v1/dm/list.so?oid=&#123;cid&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 正确的请求头</span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0&quot;,</span><br><span class="line">    &quot;Referer&quot;: &quot;https://www.bilibili.com/&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 发送请求</span><br><span class="line">response = requests.get(url=danmu_url, headers=headers)</span><br><span class="line">#&lt;Response[200]&gt;response  对象200状态码 表示请求成功</span><br><span class="line">response.encoding=response.apparent_encoding#这里进行转码，不然结果输出会有乱码</span><br></pre></td></tr></table></figure><br>获取数据<br>就直接把上面的内容打印出来即可<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(response.text)#用于验证数据正确性</span><br></pre></td></tr></table></figure><br><img src="/img/图片11.png" alt=""><br>解析数据<br>一般有三种解析方式</p><ol><li>re-正则表达式 对于字符串数据进行提取</li><li>css和xpath主要根据标签属性/节点提取数据</li></ol><p>我们上面获取的text文件是HTML的字符串数据，直接用re正则就可以了。</p><p>使用re.findall，有两个参数，一个是找什么东西，然后是从哪里去找，</p><p>查看弹幕地址<br><img src="/img/图片12.png" alt=""><br>我们发现弹幕数据由两种组成，一个是用户的数据，一个是弹幕内容，我们要的是后者。<br>所以在re.findall里面我们模糊用户的数据就可以了，也就是泛匹配。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_list= re.findall(&#x27;&lt;d p=&quot;.*?&quot;&gt;(.*?)&lt;/d&gt;&#x27;,response.text)#.*?是通配符，正则表达式元字符可以匹配任意字符（除了换行符\n以外）</span><br></pre></td></tr></table></figure><br>再用一个for循环逐个把弹幕打出来就可以了。<br><img src="/img/图片13.png" alt=""></p><p>保存数据<br>写入保存到txt文件下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data_list= re.findall(&#x27;&lt;d p=&quot;.*?&quot;&gt;(.*?)&lt;/d&gt;&#x27;,response.text)#.*?是通配符，正则表达式元字符可以匹配任意字符（除了换行符\n以外）</span><br><span class="line">for index in data_list:</span><br><span class="line">    # mode 保存方式 encoding 编码</span><br><span class="line">    with open(&#x27;弹幕.txt&#x27;, mode=&#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">      f.write(index + &#x27;\n&#x27;)</span><br><span class="line">      print(index)</span><br></pre></td></tr></table></figure></p><p> <img src="/img/图片14.png" alt=""></p><p>分析数据<br>获取数据后，就可以进行分析了<br>首先是准备<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import jieba # 结巴分词 pip install jieba</span><br><span class="line">import wordcloud #词云图 pip install wordcloud</span><br></pre></td></tr></table></figure><br>读取数据弹幕<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(&#x27;弹幕.txt&#x27;,encoding=&#x27;utf-8&#x27;)</span><br><span class="line">text = f.read()</span><br><span class="line">#print(text)</span><br></pre></td></tr></table></figure></p><p>分词，把弹幕分割成词语<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text_list=jieba.lcut(text)</span><br><span class="line">print(text_list)</span><br></pre></td></tr></table></figure><br> <img src="/img/图片15.png" alt=""><br>我们做词云图要用到字符串数据，所以我们还要把列表转成字符串，用列表的话数据会报错<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text_str = &#x27; &#x27;.join(text_list)</span><br></pre></td></tr></table></figure><br>词云图配置<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wc = wordcloud.WordCloud(</span><br><span class="line">width=500,# 宽度</span><br><span class="line">height=500,#高度</span><br><span class="line">background_color=&#x27;white&#x27;,</span><br><span class="line">font_path=&#x27;msyh.ttc&#x27;#字体文件</span><br><span class="line">)#背景颜色</span><br><span class="line"></span><br><span class="line">![](/img/图片16.png)</span><br><span class="line">wc.generate(text_str)#传入文字信息</span><br><span class="line">wc.to_file(&#x27;词云.png&#x27;)</span><br></pre></td></tr></table></figure></p><p>但是还是有很多无效的词，比如‘吧’ ‘了’之类的<br>再加入一个stopwords<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stopwords=&#123;&#x27;了&#x27;,&#x27;吧&#x27;&#125;</span><br></pre></td></tr></table></figure><br>修改词云图形</p><p>配置<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import imageio # 读取本地图片修改词云图形pip install imageio</span><br><span class="line">#加入png图片进配置文件夹，再加两行代码</span><br><span class="line">img = imageio.imread(&#x27;红心.png&#x27;)</span><br><span class="line">mask=img,</span><br></pre></td></tr></table></figure><br> <img src="/img/图片17.png" alt=""><br> 源代码：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">#headers请求头作用把Python代码进行伪装，模拟成浏览器去发送请求</span><br><span class="line">#user-agent浏览器基本身份标识</span><br><span class="line"># 需要先找到 `cid` 才能请求正确的弹幕 API</span><br><span class="line">cid = &quot;25750933691&quot;  # 这里的 `123456` 需要替换为真实的 `cid`</span><br><span class="line"></span><br><span class="line"># B站弹幕 API</span><br><span class="line">danmu_url = f&quot;https://api.bilibili.com/x/v1/dm/list.so?oid=&#123;cid&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 正确的请求头</span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36 Edg/134.0.0.0&quot;,</span><br><span class="line">    &quot;Referer&quot;: &quot;https://www.bilibili.com/&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 发送请求</span><br><span class="line">response = requests.get(url=danmu_url, headers=headers)</span><br><span class="line">#&lt;Response[200]&gt;response  对象200状态码 表示请求成功</span><br><span class="line">response.encoding=response.apparent_encoding#这里进行转码，不然结果输出会有乱码</span><br><span class="line"></span><br><span class="line">data_list= re.findall(&#x27;&lt;d p=&quot;.*?&quot;&gt;(.*?)&lt;/d&gt;&#x27;,response.text)#.*?是通配符，正则表达式元字符可以匹配任意字符（除了换行符\n以外）</span><br><span class="line">for index in data_list:</span><br><span class="line">    # mode 保存方式 encoding 编码</span><br><span class="line">    with open(&#x27;弹幕.txt&#x27;, mode=&#x27;a&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span><br><span class="line">      f.write(index + &#x27;\n&#x27;)</span><br><span class="line">      print(index)</span><br><span class="line"></span><br><span class="line">import jieba # 结巴分词 pip install jieba</span><br><span class="line">import wordcloud #词云图 pip install wordcloud</span><br><span class="line">import imageio # 读取本地图片修改词云图形</span><br><span class="line">img = imageio.imread(&#x27;红心.png&#x27;)</span><br><span class="line">#1.读取弹幕数据</span><br><span class="line">f = open(&#x27;弹幕.txt&#x27;,encoding=&#x27;utf-8&#x27;)</span><br><span class="line">text = f.read()</span><br><span class="line">#print(text)</span><br><span class="line"></span><br><span class="line">#2，分词，把一句话分割成很多词汇</span><br><span class="line">text_list=jieba.lcut(text)</span><br><span class="line">print(text_list)</span><br><span class="line"></span><br><span class="line">#列表转成字符串</span><br><span class="line">text_str = &#x27; &#x27; .join(text_list)</span><br><span class="line">print(text_str)</span><br><span class="line"></span><br><span class="line">#3.词云图配置</span><br><span class="line"></span><br><span class="line">wc = wordcloud.WordCloud(</span><br><span class="line">width=500,# 宽度</span><br><span class="line">height=500,#高度</span><br><span class="line">stopwords=&#123;&#x27;了&#x27;,&#x27;吧&#x27;,&#x27;啊&#x27;,&#x27;哈&#x27;,&#x27;的&#x27;,&#x27;啊啊啊&#x27;,&#x27;哈哈哈&#x27;,&#x27;哇&#x27;,&#x27;都&#x27;,&#x27;都是&#x27;,&#x27;这&#x27;,&#x27;一幕&#x27;,&#x27;嗯&#x27;,&#x27;你&#x27;,&#x27;你是&#x27;&#125;,</span><br><span class="line">background_color=&#x27;white&#x27;,#背景颜色</span><br><span class="line">mask=img,</span><br><span class="line">font_path=&#x27;msyh.tth&#x27;#字体文件</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">wc.generate(text_str)#传入文字信息</span><br><span class="line">wc.to_file(&#x27;词云.png&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
